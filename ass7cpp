/******************************************************************************
Student Management System (Chaining with Replacement using Hash Table)
-----------------------------------------------------------------------
Brief process:
1. Create a `Student` class to store PRN, Name, Address, and Percentage.
2. Use two static vectors:
   - `key`: stores PRNs (keys).
   `chain`: stores the link for chaining collisions.
3. Operations:
   - `create()`: Insert records using linear probing with chaining.
   - `display()`: Display full table with chain links.
   - `search()`: Search a record based on PRN.
   - `remove()`: Delete a record and handle chaining properly.
4. Hash function: PRN % 10 is used to find index in table.
*******************************************************************************/

#include <iostream>
#include <vector>
using namespace std;

class Student {
private:
    int prn, percentage;
    string name, address;

public:
    Student() {
        prn = percentage = 0;
        name = address = "";
    }

    static vector<int> key;
    static vector<int> chain;

    void create();
    void display();
    void search();
    void remove();
} H[10];

// Static member initialization
vector<int> Student::key(10, -1);
vector<int> Student::chain(10, -1);

void Student::create() {
    int n;
    cout << "How many records do you want to insert: ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        Student s;
        cout << "Enter PRN number: ";
        cin >> s.prn;
        cout << "Enter Percentage: ";
        cin >> s.percentage;
        cout << "Enter Name: ";
        cin >> s.name;
        cout << "Enter Address: ";
        cin >> s.address;

        int loc = s.prn % 10;
        int originLoc = loc;

        while (key[loc] != -1) {
            loc = (loc + 1) % 10;
            if (loc == originLoc) {
                cout << "Hash table is full." << endl;
                return;
            }
        }

        if (originLoc != loc) {
            int temp = originLoc;
            while (chain[temp] != -1) {
                temp = chain[temp];
            }
            chain[temp] = loc;
        }

        key[loc] = s.prn;
        H[loc] = s;
    }
}

void Student::display() {
    cout << "\nLoc\tPRN\tPercentage\tName\tAddress\tChain\n";
    for (int i = 0; i < 10; i++) {
        if (key[i] != -1) {
            cout << i << "\t" << key[i] << "\t" << H[i].percentage << "\t\t" << H[i].name << "\t" << H[i].address << "\t" << chain[i] << endl;
        } else {
            cout << i << "\t \t \t\t \t \t" << chain[i] << endl;
        }
    }
}

void Student::search() {
    int searchPRN;
    cout << "Enter the PRN to search: ";
    cin >> searchPRN;

    int loc = searchPRN % 10;

    while (loc != -1 && key[loc] != searchPRN) {
        loc = chain[loc];
    }

    if (loc == -1) {
        cout << "Record not found." << endl;
    } else {
        cout << "\nLoc\tPRN\tPercentage\tName\tAddress\tChain\n";
        cout << loc << "\t" << key[loc] << "\t" << H[loc].percentage << "\t\t" << H[loc].name << "\t" << H[loc].address << "\t" << chain[loc] << endl;
    }
}

void Student::remove() {
    int deletePRN;
    cout << "Enter the PRN to delete: ";
    cin >> deletePRN;

    int loc = deletePRN % 10;
    int prevLoc = -1;

    while (loc != -1 && key[loc] != deletePRN) {
        prevLoc = loc;
        loc = chain[loc];
    }

    if (loc == -1) {
        cout << "Record not found." << endl;
        return;
    }

    key[loc] = -1;
    H[loc] = Student(); // Reset to default student

    if (prevLoc != -1) {
        chain[prevLoc] = chain[loc];
    }
    chain[loc] = -1;

    cout << "Record deleted successfully." << endl;
}

int main() {
    Student s;
    int choice;

    do {
        cout << "\nMenu:";
        cout << "\n1. Create Records";
        cout << "\n2. Display Records";
        cout << "\n3. Search Record";
        cout << "\n4. Remove Record";
        cout << "\n5. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                s.create();
                break;
            case 2:
                s.display();
                break;
            case 3:
                s.search();
                break;
            case 4:
                s.remove();
                break;
            case 5:
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice! Try again." << endl;
        }
    } while (choice != 5);

    return 0;
}

